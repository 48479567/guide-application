En esta parte se toma codigo de github para el arreglo y acoplamiento.
https://github.com/EduardoIbarra/msn_mobile_platzi_pre/blob/pos8_nested/src/pages/login/login.ts


a1) shortcuts/toast.sc.ts

import ...

@Injectable()

export class ToastCustom {
  constructor(private toastCtrl: ToastController) {

  }
  toastMain(message: string, duration: number, position: string) {
    let toastMain = this.toastCtrl.create({
      message,
      duration,
      position
    });
    toast.present();
  }
}

/app.module

providers: [
  ...,
  ToastCustom
]


/login.ts
c: any = console.log;
clog: any;
password: string;
password2: string;
status: Status;
name: string;
operation: string = 'login';

constructor(..., toastCustom: ToastCustom) {
  ....
}

registerWithEmail() {
  if(this.password != this.password2) {
    this.clog = () => {
      c('Las contraseñas no coinciden);
      return;
    }
    this.alertCustom.toastMain('Mal Ingreso', 'Las Contraseñas no Coinciden', this.clog);    
  }
  this.authService.registerWithEmail(this.email, this.password)
    .then((data) => {
      const user: User = {
        name: this.name,
        email. this.email,
        status: this.status,
        uid: data.user.uid,
        active: true
      };
      this.userService.createUser(user)
        .then((data1) => {
          this.toastCustom('Usuario Registrado!!!', 3000, 'bottom');
          this.operation = 'login';
          this.c(data);
        })
        .catch((error) => {
          this.clog = () => c(error);
          this.alertCustom.alertAcept('Error', 'Error en la Creacion del Usuario', this.clog); 
        )};
    })
    .catch((error) => {
      this.clog = () => c(error);
      this.alertCustom.alertAcept('Error', 'Error en Registro de Cuentas de Firebase', this.clog);
    });
}

loginWithEmail() {
  this.authService.loginWithEmail(this.email, this.password)
    .then(data => {
      this.c(data);
      this.toastCustom.toastMain('Bienvenido', 3000, 'bottom');
      this.navCtrl.setRoot(HomePage);
    })
    .catch(error => {
      this.clog = () => c(error);
      this.alertCustom.alertAcept('Error', 'Error en el Ingreso', this.clog);
    });
}


/**/*/*


/login.html

<ion-header>
  <ion-navbar>
    <ion-title>Login</ion-title>
  </ion-navbar>
</ion-header>


<ion-content padding class="backgroundPlatzinger bsposy0">
  <div id="avatarLogin">
    <ion-row>
      <ion-col col-6 offset-3>
        <div class="avatarFrameOffline">
          <img src="assets/img/generic_avatar.png" class="avatarImage img-fluid">
        </div>
      </ion-col>
    </ion-row>
  </div>

  <ion-list>
    <ion-item *ngIf="operation === 'register'">
      <ion-label fixed>Nombre</ion-label>
      <ion-input type="text" [(ngModel)]="nombre"></ion-input>
    </ion-item>
    <ion-item>
      <ion-label fixed>Email</ion-label>
      <ion-input type="email" [(ngModel)]="email"></ion-input>
    </ion-item>
    <ion-item>
      <ion-label fixed>Password</ion-label>
      <ion-input type="password" [(ngModel)]="password"></ion-input>
    </ion-item>
    <ion-item *ngIf="operation === 'register'">
      <ion-label fixed>Repetir</ion-label>
      <ion-input type="text"></ion-input>
    </ion-item>
    <ion-item>
      <ion-label>Status</ion-label>
      <ion-select [(ngModel)]="status">
        <ion-option value="online">Conectado</ion-option>
        <ion-option value="away">Ausente</ion-option>
        <ion-option value="busy">Ocupado</ion-option>
        <ion-option value="appear_offline">Desconectado</ion-option>
      </ion-select>
    </ion-item>
  </ion-list>
  <div padding>
    <span *ngIf="operation === 'register'">Ya tienes Cuenta?<a (click="operation  = 'login'")><b>Click Aquí</b></a></span>
    <span *ngIf="operation === 'login'">Aún no tienes Cuenta?<a (click)="operation = 'register'"><b>Click Aquí</b></a></span>
    <hr />
    <button ion-button block (click)="login()">Ingresar</button>
    <button ion-button block (click)="register()">Registrarse</button>
  </div>
</ion-content>

Se hace algunos complementos adicionales por si existe incon